#!/usr/bin/env python3
import os
import sys
import curses
import subprocess
import time
import socket
import json
import random
from mutagen.easyid3 import EasyID3

import shutil

# --- Dependency check ---
for cmd in ["mpv", "ffprobe", "python3"]:
    if shutil.which(cmd) is None:
        print(f"Error: {cmd} is not installed. Install it and try again.")
        sys.exit(1)

SOCKET_PATH = "/tmp/mpvsocket"
CONFIG_FILE = os.path.expanduser("~/.play_default_dir")
MEDIA_EXTENSIONS = (".mp3", ".webm", ".mp4")

def save_default_folder(path):
    try:
        with open(CONFIG_FILE, "w") as f:
            f.write(path)
    except:
        pass

def load_default_folder():
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r") as f:
                path = f.read().strip()
                if os.path.isdir(path):
                    return path
        except:
            pass
    return os.getcwd()

def list_media_files(folder="."):
    files = []
    for root, dirs, filenames in os.walk(folder):
        for f in filenames:
            if f.lower().endswith(MEDIA_EXTENSIONS):
                files.append(os.path.join(root, f))
    return sorted(files)


duration_cache = {}
def get_duration(file):
    if file in duration_cache:
        return duration_cache[file]
    try:
        result = subprocess.run(
            ["ffprobe", "-v", "error", "-show_entries",
             "format=duration", "-of", "default=noprint_wrappers=1:nokey=1", file],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )
        dur = float(result.stdout.strip() or 0)
        duration_cache[file] = dur
        return dur
    except Exception as e:
        print(f"Error getting duration for {file}: {e}")
        return 0

def get_metadata(file):
    if file.lower().endswith(".mp3"):
        try:
            tags = EasyID3(file)
            artist = tags.get("artist", ["Unknown Artist"])[0]
            album = tags.get("album", ["Unknown Album"])[0]
            title = tags.get("title", [os.path.basename(file)])[0]
            return f"{artist} - {album} - {title}"
        except:
            return os.path.basename(file)
    else:
        return os.path.basename(file)

def play_file(file):
    if os.path.exists(SOCKET_PATH):
        try:
            os.remove(SOCKET_PATH)
        except:
            print("Cannot remove mpv socket. Ahh thats odd an error??! Maybe another mpv is running.. you should check")
    args = ["mpv", "--quiet", "--no-video", f"--input-ipc-server={SOCKET_PATH}", file]
    try:
        return subprocess.Popen(args, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except:
        return None


def mpv_command(cmd, args=[]):
    try:
        s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        s.connect(SOCKET_PATH)
        payload = {"command": [cmd] + args}
        s.sendall((json.dumps(payload) + "\n").encode())
        data = s.recv(1024)
        s.close()
        return json.loads(data.decode())
    except:
        return None

def format_time(seconds):
    try:
        mins = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{mins:02d}:{secs:02d}"
    except:
        return "00:00"

def generate_progress_bar(elapsed, total, length=30):
    if total <= 0:
        filled = 0
    else:
        filled = int(length * elapsed / total)
    bar = ""
    gradient = [curses.COLOR_CYAN, curses.COLOR_BLUE, curses.COLOR_MAGENTA]
    for i in range(length):
        color = gradient[i*len(gradient)//length]
        if i < filled:
            bar += "‚ñà"
        else:
            bar += "‚îÄ"
    return f"[{bar}]"

def safe_addstr(win, y, x, text, attr=0):
    try:
        win.addstr(y, x, text, attr)
    except curses.error:
        pass


def draw_ui(win, playlist, current, elapsed, total, repeat_mode, shuffle, folder, scroll,paused):
    win.clear()
    max_y, max_x = win.getmaxyx()
    COLOR_NORMAL = curses.color_pair(1)
    COLOR_HIGHLIGHT = curses.color_pair(2) | curses.A_BOLD
    COLOR_PROGRESS = curses.color_pair(3) | curses.A_BOLD
    COLOR_BORDER = curses.color_pair(4) | curses.A_BOLD

    header_text = f" üéµ Now Playing: {get_metadata(playlist[current])} "
    safe_addstr(win, 0, 0, "‚ïî" + "‚ïê"*(max_x-2) + "‚ïó", COLOR_BORDER)
    safe_addstr(win, 1, 0, "‚ïë" + header_text.center(max_x-2) + "‚ïë", COLOR_HIGHLIGHT)
    safe_addstr(win, 2, 0, "‚ï†" + "‚ïê"*(max_x-2) + "‚ï£", COLOR_BORDER)

    progress = generate_progress_bar(elapsed, total, length=max_x-20)
    safe_addstr(win, 5, 0, f"{progress} {format_time(elapsed)}/{format_time(total)}".center(max_x), COLOR_PROGRESS)
    status = "‚è∏ Paused" if paused else "‚ñ∂ Playing"
    safe_addstr(win, 3, 0, status.center(max_x), curses.color_pair(2)|curses.A_BOLD)

    if repeat_mode == 0:
        repeat_icon = "‚ùå"
    elif repeat_mode == 1:
        repeat_icon = "üîÅ (All)"
    else:
        repeat_icon = "üîÇ (Track)"

    shuffle_icon = "üîÄ" if shuffle else "‚ùå"
    safe_addstr(win, 4, 0, f"Repeat: {repeat_icon}  Shuffle: {shuffle_icon}".center(max_x), COLOR_NORMAL)

    safe_addstr(win, 6, 0, "‚ï†" + "‚ïê"*(max_x-2) + "‚ï£", COLOR_BORDER)
    visible_lines = max_y - 10
    for i in range(scroll, min(len(playlist), scroll + visible_lines)):
        prefix = ">> " if i == current else "   "
        color = COLOR_HIGHLIGHT if i == current else COLOR_NORMAL
        safe_addstr(win, 7 + i - scroll, 0, f"{prefix}{i+1}. {os.path.basename(playlist[i])}".ljust(max_x), color)

    safe_addstr(win, max_y-4, 0, "‚ïö" + "‚ïê"*(max_x-2) + "‚ïù", COLOR_BORDER)

    controls = "‚èØ p=Pause   ‚è≠ n/‚Üì=Next   ‚èÆ b/‚Üë=Prev   ‚è™ ‚Üê/‚Üí=Seek   üîÅ r=Repeat   üîÄ s=Shuffle   ‚ùå q=Quit"
    safe_addstr(win, max_y-3, 0, controls.center(max_x), COLOR_HIGHLIGHT)

    safe_addstr(win, max_y-2, 0, f"üìÇ Folder: {folder}".center(max_x), COLOR_HIGHLIGHT)
    win.refresh()

def main(stdscr):
    curses.curs_set(0)
    curses.start_color()
    curses.use_default_colors()
    curses.init_pair(1, curses.COLOR_WHITE, -1)      
    curses.init_pair(2, curses.COLOR_MAGENTA, -1)    
    curses.init_pair(3, curses.COLOR_RED, -1)       
    curses.init_pair(4, curses.COLOR_MAGENTA, -1)

    folder = load_default_folder()
    files = list_media_files(folder)
    if not files:
        files = list_media_files(os.getcwd())
        if not files:
            print("No media files found! Exiting.")
            sys.exit(1)

    current = 0
    repeat_mode = 0
    paused = False
    shuffle = False
    scroll = 0
    playlist = files[:]
    process = play_file(playlist[current])
    total = get_duration(playlist[current])

    stdscr.nodelay(True)

    while True:
        if process and process.poll() is not None:
            if repeat_mode == 2:
                process = play_file(playlist[current])
                paused = False
            elif repeat_mode == 1:
                current = (current + 1) % len(playlist)
                process = play_file(playlist[current])
                total = get_duration(playlist[current])
                paused = False
            else:
                if current + 1 < len(playlist):
                    current += 1
                    process = play_file(playlist[current])
                    total = get_duration(playlist[current])
                    paused = False
                else:
                    process = None
        elapsed = 0
        if process:
            pos_resp = mpv_command("get_property", ["time-pos"])
            try:
                elapsed = float(pos_resp.get("data", 0)) if pos_resp else 0
            except:
                elapsed = 0
            total = get_duration(playlist[current])

        
        max_y, _ = stdscr.getmaxyx()
        visible_lines = max_y - 10
        if current < scroll:
            scroll = current
        elif current >= scroll + visible_lines:
            scroll = current - visible_lines + 1

        draw_ui(stdscr, playlist, current, elapsed, total, repeat_mode, shuffle, folder, scroll,paused)

        
        key = stdscr.getch()
        if key != -1:
            if key == ord('p'):
                paused = not paused
                mpv_command("set_property", ["pause", paused])
            elif key in (ord('n'), curses.KEY_DOWN):
                current = (current + 1) % len(playlist)
                if process: process.terminate()
                process = play_file(playlist[current])
                paused = False
            elif key in (ord('b'), curses.KEY_UP):
                current = (current - 1) % len(playlist)
                if process: process.terminate()
                process = play_file(playlist[current])
                paused = False
            elif key == ord('r'):
                repeat_mode = (repeat_mode + 1) % 3
            elif key == curses.KEY_RIGHT:  
                mpv_command("seek", ["10", "relative"])
            elif key == curses.KEY_LEFT:   
                mpv_command("seek", ["-10", "relative"])
            elif key == ord('s'):
                shuffle = not shuffle
                current_file = playlist[current]
                if shuffle:
                    random.shuffle(playlist)
                else:
                    playlist = files[:]
                current = playlist.index(current_file)
                if process:
                    process.terminate()
                process = play_file(playlist[current])
                paused = False
            elif key in (27, ord('q')):
                break

        time.sleep(0.15)

if __name__ == "__main__":
    if len(sys.argv) >= 3 and sys.argv[1] == "set" and sys.argv[2] == "default":
        folder = sys.argv[3] if len(sys.argv) >= 4 else os.getcwd()
        if os.path.isdir(folder):
            save_default_folder(folder)
            print(f"Default music folder set to: {folder}")
            sys.exit(0)
        else:
            print("Invalid folder path")
            sys.exit(1)

    try:
        curses.wrapper(main)
    finally:
        if os.path.exists(SOCKET_PATH):
            try:
                subprocess.run(["killall", "mpv"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            except:
                pass
        print("\nGoodbye user.. see you soon. UwU")
        sys.exit(0)


